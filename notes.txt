## Migration Steps

1. After modifying models, generate a new migration:
   flask db migrate -m "Describe changes"

2. Apply migrations for all tenant databases:
   python scripts/migrate_tenants.py

3. Start the application:
   python main.py

If migrations are re-initialized (e.g., you recreated the migrations
folder), stamp each tenant database to the current revision before
running the migration script:

   FLASK_APP=main.py SQLALCHEMY_DATABASE_URI=sqlite:///tenant_dbs/<tenant>.db \
       flask db stamp head


## Configuring the live MySQL database
Set the ``SQLALCHEMY_DATABASE_URI`` environment variable on the server to use
your MySQL instance. For the provided credentials the value would be::

    mysql+pymysql://mleasd:@T@_$Ciy2kTSg_t@mleasd.mysql.pythonanywhere-services.com/mleasd$accounts

If this variable is not set the application falls back to the default SQLite
database for local testing.  ``notes.txt`` is only for developer reference and
does not need to be deployed to production.


## Resolving "no such column" errors
If you see `sqlite3.OperationalError: no such column` after adding a new field like `email` to a model:
1. Generate a migration describing the new field:
   flask db migrate -m "Add email to customers"
2. Apply the migration for every tenant database:
   python scripts/migrate_tenants.py
3. Confirm the `customers` table now includes the `email` column in the tenant DB files under `tenant_dbs/`.



# migrations/env.py
from sqlalchemy import MetaData
from app.models import Base

def get_metadata():
    main_meta = target_db.metadata
    tenant_meta = Base.metadata

    merged = MetaData()
    for table in main_meta.tables.values():
        table.tometadata(merged)
    for table in tenant_meta.tables.values():
        if table.name not in merged.tables:
            table.tometadata(merged)
    return merged
 ----------------------------------------------------
import logging
from logging.config import fileConfig
from sqlalchemy import MetaData
from app.models import Base
from flask import current_app
from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except (TypeError, AttributeError):
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    main_meta = target_db.metadata
    tenant_meta = Base.metadata

    merged = MetaData()
    for table in main_meta.tables.values():
        table.tometadata(merged)
    for table in tenant_meta.tables.values():
        if table.name not in merged.tables:
            table.tometadata(merged)
    return merged


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    conf_args = current_app.extensions['migrate'].configure_args
    if conf_args.get("process_revision_directives") is None:
        conf_args["process_revision_directives"] = process_revision_directives

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            **conf_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
